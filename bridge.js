/**
 * Script de ponte entre m√≥dulos ES6 e scripts regulares
 * Este arquivo exp√µe fun√ß√µes dos m√≥dulos ES6 como vari√°veis globais
 * para que scripts antigos possam acess√°-las
 */
console.log('üîå bridge.js: Carregando script de conex√£o entre m√≥dulos...');

// Importar as fun√ß√µes necess√°rias dos m√≥dulos ES6
import { searchFlights } from './src/services/flightService.js';
import {
    validarCodigoIATA,
    extrairCodigoIATA,
    normalizarParametroBusca,
    obterNomeAeroporto,
    CODIGOS_IATA_BR
} from './src/utils/validacao.js';
import {
    inicializarSugestoes,
    mostrarSugestoes
} from './src/utils/sugestoes.js';
import {
    inicializarControladorBusca,
    realizarBusca
} from './src/controllers/buscaController.js';
import {
    criarCartaoVoo,
    exibirErro
} from './src/utils/flightDisplay.js';

// Fun√ß√µes que ser√£o expostas globalmente
const exposedFunctions = {
    // API de voos
    searchFlights,

    // Valida√ß√£o
    validarCodigoIATA,
    extrairCodigoIATA,
    normalizarParametroBusca,
    obterNomeAeroporto,
    CODIGOS_IATA_BR,

    // Sugest√µes
    inicializarSugestoes,
    mostrarSugestoes,

    // Controlador de busca
    inicializarControladorBusca,
    realizarBusca,
    buscarVoos: realizarBusca, // Alias para compatibilidade

    // Exibi√ß√£o de resultados
    criarCartaoVoo,
    exibirErro
};

// Expor as fun√ß√µes globalmente
Object.entries(exposedFunctions).forEach(([name, func]) => {
    if (typeof func !== 'undefined') {
        window[name] = func;
        console.log(`‚úÖ bridge.js: Fun√ß√£o ${name} exposta globalmente`);
    } else {
        console.error(`‚ùå bridge.js: Fun√ß√£o ${name} n√£o encontrada para exposi√ß√£o global`);
    }
});

// Verificar se as principais fun√ß√µes foram expostas corretamente
const requiredFunctions = ['searchFlights', 'mostrarSugestoes', 'realizarBusca', 'criarCartaoVoo'];
const missingFunctions = requiredFunctions.filter(funcName => typeof window[funcName] !== 'function');

if (missingFunctions.length > 0) {
    console.error(`‚ùå bridge.js: As seguintes fun√ß√µes essenciais n√£o foram expostas corretamente: ${missingFunctions.join(', ')}`);
} else {
    console.log('‚úÖ bridge.js: Todas as fun√ß√µes essenciais foram expostas com sucesso!');
}

// Executar inicializa√ß√£o quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    try {
        console.log('üöÄ bridge.js: Inicializando aplica√ß√£o...');

        // Inicializar componentes
        if (typeof inicializarSugestoes === 'function') {
            inicializarSugestoes();
        }

        if (typeof inicializarControladorBusca === 'function') {
            inicializarControladorBusca();
        }

        console.log('‚úÖ bridge.js: Inicializa√ß√£o conclu√≠da!');

        // Disparar evento de inicializa√ß√£o conclu√≠da para outros scripts
        const event = new CustomEvent('modulesInitialized', {
            detail: { timestamp: Date.now() }
        });
        document.dispatchEvent(event);
    } catch (error) {
        console.error('‚ùå bridge.js: Erro durante a inicializa√ß√£o:', error);
    }
});